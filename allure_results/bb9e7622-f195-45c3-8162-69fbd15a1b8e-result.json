{"name": "Проверяем метод get_receipt() - получение рецепта бургера", "status": "broken", "statusDetails": {"message": "AttributeError: 'NoneType' object has no attribute 'get_name'", "trace": "self = <test_burger.TestBurger object at 0x000001C77B990B50>\nmock_bun_class = <MagicMock name='get_price' id='1956284427344'>\nmock_ingredient_class = <MagicMock name='Ingredient' id='1956284426832'>\nmock_burger_get_price = <MagicMock name='Bun' id='1956284523856'>, has_buns = False, has_sauce = True\nhas_filling = False\n\n    @allure.title('Проверяем метод get_receipt() - получение рецепта бургера')\n    @patch('burger.Bun')\n    @patch('burger.Ingredient')\n    @patch('burger.Burger.get_price', return_value=500)\n    @pytest.mark.parametrize('has_buns, has_sauce, has_filling', [\n        [True, True, True],        # булки и 2 ингредиента\n        [True, False, False],      # только булки\n        [True, True, False],       # булки и соус\n        [False, True, False],      # только соус без булок\n        [False, False, False]     # \"пустой\" бургер - без булок и ингредиентов\n    ])\n    def test_get_receipt(self, mock_bun_class, mock_ingredient_class,\n                         mock_burger_get_price,\n                         has_buns, has_sauce, has_filling):\n        # создаем моки для булок и ингредиентов\n        # назначаем возвращаемое значение для методов get_name() и get_type()\n        mock_bun = Mock()\n        mock_bun.get_name.return_value = BUN_NAME\n        mock_bun.get_price.return_value = BUN_PRICE\n        mock_sauce = Mock()\n        mock_sauce.get_type.return_value = SAUCE_TYPE\n        mock_sauce.get_name.return_value = SAUCE_NAME\n        mock_sauce.get_price.return_value = SAUCE_PRICE\n        mock_filling = Mock()\n        mock_filling.get_type.return_value = FILLING_TYPE\n        mock_filling.get_name.return_value = FILLING_NAME\n        mock_filling.get_price.return_value = FILLING_PRICE\n    \n        # создаем бургер\n        burger = Burger()\n        if has_buns:\n            burger.set_buns(mock_bun)\n        if has_sauce:\n            burger.add_ingredient(mock_sauce)\n        if has_filling:\n            burger.add_ingredient(mock_filling)\n    \n        # получаем рецепт\n>       receipt = burger.get_receipt()\n\ntests\\test_burger.py:289: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <burger.Burger object at 0x000001C777FE5D50>\n\n    def get_receipt(self) -> str:\n>       receipt: List[str] = [f'(==== {self.bun.get_name()} ====)']\nE       AttributeError: 'NoneType' object has no attribute 'get_name'\n\nburger.py:40: AttributeError"}, "parameters": [{"name": "has_buns", "value": "False"}, {"name": "has_sauce", "value": "True"}, {"name": "has_filling", "value": "False"}], "start": 1702833758957, "stop": 1702833758960, "uuid": "eaa15cd3-469e-476a-a680-93dd31b5c28d", "historyId": "c978776027ff1f14f243abe1fe0744e7", "testCaseId": "5bf52d3a38b900560c9be02b6a5d981c", "fullName": "tests.test_burger.TestBurger#test_get_receipt", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_burger"}, {"name": "subSuite", "value": "TestBurger"}, {"name": "host", "value": "DESKTOP-O6MNHQN"}, {"name": "thread", "value": "14256-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_burger"}]}