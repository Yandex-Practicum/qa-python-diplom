{"name": "Проверяем метод get_price() - получение стоимости бургера", "status": "broken", "statusDetails": {"message": "AttributeError: 'NoneType' object has no attribute 'get_price'", "trace": "self = <test_burger.TestBurger object at 0x000001C77B98A910>\nmock_bun_class = <MagicMock name='Ingredient' id='1956284281936'>\nmock_ingredient_class = <MagicMock name='Bun' id='1956283883600'>, has_buns = False, has_sauce = True\nhas_filling = False, has_price = 100\n\n    @allure.title('Проверяем метод get_price() - получение стоимости бургера')\n    @patch('burger.Bun')\n    @patch('burger.Ingredient')\n    @pytest.mark.parametrize('has_buns, has_sauce, has_filling, has_price', [\n        [True, True, True, 400],  # булки и 2 ингредиента\n        [True, False, False, 100],  # только булки\n        [True, True, False, 200],  # булки и соус\n        [False, True, False, 100],  # только соус без булок\n        [False, False, False, 0]  # \"пустой\" бургер - без булок и ингредиентов\n    ])\n    def test_get_price(self, mock_bun_class, mock_ingredient_class,\n                       has_buns, has_sauce, has_filling, has_price):\n        # создаем моки для булок и ингредиентов\n        # назначаем возвращаемое значение мокам для метода get_price()\n        mock_bun = Mock()\n        mock_bun.get_price.return_value = BUN_PRICE\n        mock_sauce = Mock()\n        mock_sauce.get_price.return_value = SAUCE_PRICE\n        mock_filling = Mock()\n        mock_filling.get_price.return_value = FILLING_PRICE\n        # создаем бургер и добавляем в него булки и ингредиенты\n        burger = Burger()\n        if has_buns:\n            burger.set_buns(mock_bun)\n        if has_sauce:\n            burger.add_ingredient(mock_sauce)\n        if has_filling:\n            burger.add_ingredient(mock_filling)\n    \n        # проверяем, что метод get_price() возвращает правильную стоимость\n>       assert burger.get_price() == has_price\n\ntests\\test_burger.py:246: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <burger.Burger object at 0x000001C779369510>\n\n    def get_price(self) -> float:\n>       price = self.bun.get_price() * 2\nE       AttributeError: 'NoneType' object has no attribute 'get_price'\n\nburger.py:32: AttributeError"}, "parameters": [{"name": "has_buns", "value": "False"}, {"name": "has_sauce", "value": "True"}, {"name": "has_filling", "value": "False"}, {"name": "has_price", "value": "100"}], "start": 1702833758877, "stop": 1702833758891, "uuid": "868a685d-0524-4ce9-b8db-5b5cf31a1852", "historyId": "a027fabad092acb3372e2d9e80c83e65", "testCaseId": "9bc48baa4883de12242efddc23bca86a", "fullName": "tests.test_burger.TestBurger#test_get_price", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_burger"}, {"name": "subSuite", "value": "TestBurger"}, {"name": "host", "value": "DESKTOP-O6MNHQN"}, {"name": "thread", "value": "14256-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_burger"}]}